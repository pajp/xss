head	1.6;
access;
symbols;
locks
	rasmus:1.6; strict;
comment	@# @;


1.6
date	2003.06.30.09.23.28;	author rasmus;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.30.02.39.11;	author rasmus;	state Exp;
branches;
next	1.4;

1.4
date	2003.06.30.02.38.52;	author rasmus;	state Exp;
branches;
next	1.3;

1.3
date	2003.06.30.02.37.24;	author root;	state Exp;
branches;
next	1.2;

1.2
date	2003.06.30.02.36.06;	author root;	state Exp;
branches;
next	1.1;

1.1
date	2002.05.07.05.52.18;	author root;	state Exp;
branches;
next	;


desc
@@


1.6
log
@*** empty log message ***
@
text
@<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "DTD/xhtml1-strict.dtd"> 
<html><head><title>XSS</title>
<link rel="stylesheet" href="xss.css" />
</head>
<body>
 <p class="header">
  The Bricole XML Session Server
 </p>
<p class="pageheader"/>

</p>
<h2>Introduction</h2>
<p>
   Bricole XSS is a server application primarily intended for use together the
   Flash 5 feature <a
   href="http://www.macromedia.com/support/flash/action_scripts/objects/xmlsocket_object.html">XMLSocket</a>.
   XSS makes it easy to create server-side Java-based application that
   communicates with a Flash 5 movie through the use of a persistent
   TCP socket and XML. Alpha versions are
   available for interested parties. Contact the author (see address
   at page footer) for more information; also see the <a
   href="#history">history</a> section below.
</p>
<h2>News</h2>
<h3>June 30, 2003: name change and Javascript support</h3>
<p>
The product name is now <i>Bricole XSS</i>, changed from its earlier
name <i>Vingmedia XSS</i>. The URL has also changed from
<code>http://dll.nu/xss/</code> to
<code>http://www.bricole.se/xss/</code>.
</p><p>
Although this site hasn't been updated for over two years, XSS
development has slowly continued. Due to recent public interest, I
have been preparing to make a release of XSS 0.9. This will be a
public (binary only) version free for non-commercial use.<br>

The new version includes Javascript (ECMAScript) support, with
practically the same possibilities in Javascripts as in traditional
Java modules.
And since the ECMAScript core is compatible with Flash
ActionScript, this means you can even share code libararies between
your Flash app and the server! Also, only having to code in one
language for both client and server greatly speeds up the development
of your new Internet applications.
</p>
<h3>June 3, 2001: preview API Javadoc released</h3>
<p>
A subset of the documentation for the XSS module API is available
in Javadoc format for public review.
<ul>
<li><a href="docs/">XML Session Server 0.8 module API documentation</a>
</ul>
The latest released alpha version of XSS is <b>0.7</b>.
</p>
<h2>How it works</h2>
<h3>the XSS Java module</h3>
<p>
   In XSS 1.0, there are two kinds of modules: session-modules and
   stateless modules. <b>Session</b> modules are instantiated upon a
   client connection and removed upon client disconnect. If each
   client needs a large amount of client-specific stateful data, a
   Session module might be a good idea. <b>Stateless</b> modules, on
   the other hand, gets instantiated when the XSS server starts, and
   lives through the life of the server <sup>1</sup>, each object being
   shared by several clients.
   </p>
<p><b>Note:</b> ECMAScripts are all run as stateless modules. They do,
however, have complete access to the <b>ClientSession</b> object,
making it easy to maintain session data.</p>

<h3>sample Javascript/ECMAScript</h3>
<pre class="example"><b class="example">// Sample XSS script, helloworld.es</b>

var count = 0;

function test(session, proxy, element) {
    var myXML = XMLUtil.newXML();
    var element = myXML.createElement("message");
    count++;
    element.setAttribute("text", "hello, world " + count);
    myXML.appendChild(element);
    return myXML;
}

this.tag="hello";
this.onXML = test;
</pre>

<h3>sample Java</h3>
<p>
<b>note:</b> the below example is based on the current development
API. The actual module API in the release version may vary.
</p>
<pre class="example"><b class="example">/* SampleModule.java */</b>
package com.example;

import se.bricole.xss.server.*;
import org.w3c.dom.*;
import java.util.Properties;

class SampleModule implements Module, XMLTagHandler {

    public String[] getTagNames() { return { "counter" }; }

    public SampleModule() {} <b class="example">// all modules needs a default constructor</b>

    private static int counter = 0;

    public boolean xmlTag(ClientConnection client,
                          ClientProxy proxy,
                          Element xml) {
		  
        if (e.getTagName().equals("counter")) {
	    <b class="example">/* the ClientConnection.send(String) method sends
	     * a null-terminated string of data to the client.
	     * XMLUtils.simpleTag(String, Properties) is a static
	     * method to make simple XML tags. The Properties argument
	     * is used to build the attribute list of the XML tag.
	     */</b>
	    counter++;
	    Properties p = new Properties();
	    p.setProperty("count", ""+counter);
             client.send(XMLUtils.simpleTag("counter-reply", p);
	    proxy.serverBroadcast(client, <b class="example">// broadcast the new counter value</b>
                                   XMLUtil.simpleTag("counter-update", p), true);
	    return true;
        }
	return false; <b class="example">// tell XSS that the tag wasn't handled by this module</b>
    }
}
</pre>
<h3>sample XSS configuration file module directove</h3>
<pre class="example">&lt;Modules&gt;
    &lt;Module source="classpath" name="com.example.SampleModule"/&gt;
&lt;/Modules&gt;</pre>


<h3>sample Flash 5 ActionScript</h3>
<pre class="example">function setupNetwork() { <b class="example">// run this function when the Flash movie starts</b>
    var sock = new XMLSocket();
    sock.onConnect = myOnConnect;
    sock.onXML = myOnXML;
    if (!sock.connect("server-hostname.example.com", 8085)) {
       _root.counterField = "error!"; <b class="example">// first stage of connection went wrong, inform the user</b>
    }
    _root.sock = sock;
    _root.connected = 0;
}

function myOnConnect(success) {
    if (success) {
        _root.connected = 1;
        askServer(); <b class="example">// send XML query to server upon connect</b>
    } else {
        _root.counterField = "error!"; <b class="example">// connection refused or timed out (server unavailable)</b>
    }
}

function myOnXML(xml) {
    var e = xml.firstChild;
    if (e.nodeName == "counter-reply" || e.nodeName == "counter-update") {
        <b class="example">// react on the server output by, for example, updating a
        // text field</b>
        counterTextField = e.attributes.count;
    }
}

function askServer() { <b class="example">// run this function upon, for example, a user click</b>
    if (_root.connected != 1) {
        <b class="example">// we have no connection yet, or the connect failed, tell the user</b>
    }
    var doc = new XML();
    var tag = doc.createElement("counter");
    doc.appendChild(tag);
    _root.sock.send(doc);
}

setupNetwork();
</pre>

<h3>the counter module in action</h3>
  <object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
          codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=5,0,0,0"
          width="100" height="100" align="right">
    <param name="movie" value="counter-sample.swf"/>
    <param name="quality" value="high"/>
    <param name="bgcolor" value="#FFFFFF"/>
    <embed align="right" src="counter-sample.swf" quality="high"
           bgcolor="#FFFFFF" width="100" height="100"
	   type="application/x-shockwave-flash"
	   pluginspage="http://www.macromedia.com/shockwave/download/index.cgi?P1_Prod_Version=ShockwaveFlash">
    </embed>
  </object>
<script language="JavaScript1.2">
  var xoffset = 100;
  var xfactor = 105;
  var url = "counter-sample.html";
  function openCounterWindow(factor) {
      var x = factor * xfactor;
      var w = window.open(url, "w" + x, "menubar=no,toolbar=no,width=100,height=100,screenX=" + x + ",screenY=100");
      w.moveTo(x, 100);
  }

  function counterWindows() {
    var x = 100;
    for (var i = 0; i < 6; i++) {
        setTimeout("openCounterWindow(" + i + ")", i*3000);
    }
  }
</script>
<p>
To the right is a live example of the above sample counter module. If
the counter says "ERR!", the server is down or you are behind a
firewall that is denying connections to port 8085. Note that the
connection to the server is persistant as long as the Flash movie is
active. Since the module requests updates to be broadcasted to all
clients, the counter will be increased automatically if another user
accesses the page while you are watching it. This can be demonstrated
by <a href="javascript:counterWindows()">opening several windows with
the counter</a> (each window opens with a three second delay to
demonstrate the asynchronous updates). If you want to examine the
source code more closely, the files are available below<sup>2</sup>:
  <ul>
    <li> <a href="example-modules.jar">JAR file containing Java classes and source code</a>
    <li> <a href="counter-sample.fla">Shockwave Flash 5 FLA file</a>
  </ul>
Another live demo of the XSS is the <a target="_new" href="chat/">XSS
chat</a> (<a href="chat/chat_demo.fla">.FLA source
available</a>). Note, however, that the Flash chat movie is heavily
underdeveloped, and is only a very simple example of how to use the
XSS Chat Module, included in the XSS distribution.
</p>
<h2><a name="history"/>History</h2>
<p>
  <b>Mars 3, 2001</b>: project initiated<br />
  <b>Mars 15, 2001</b>: first alpha released<br />
  <b>April 6, 2001</b>: alpha 3 released - first appearance of the
  Chat Module<br />
  <b>April 17, 2001</b>: alpha 5 released - added the ClientProxy
  feature<br />
  <b>May 2, 2001</b>: alpha 6 released - slightly modified module API<br />
  <b>June 2, 2001</b>: alpha 7 released - released .FLA source and live
  demo for SampleCounterModule<br />
  <b>June 30, 2003</b>: implemented ECMAScript support, alpha 9
  planned to July 7, 2003<br />
</p>

<p class="footnotes">
   <i>footnotes:</i><br/>

   <sup>1</sup>: in the current
   implementation, each Stateless module is associated with a
   <b>ClientProxy</b>. A ClientProxy lives only as long as there are clients
   connected to the server, and depending on the <b>UsersPerProxy</b>
   configuration option, there may exist several ClientProxy objects
   in the same XSS server.<br/>
   <sup>2</sup>: the source code in the downloadable files may differ
   slightly from the code presented on this page, mostly because the
   downloadable files are updated more often than the web page.
</p>
 <p class="footer">
 Copyright &copy; 2001 by Rasmus Sten &lt;<a
 href="mailto:rasmus@@bricole.se">rasmus@@bricole.se</a>&gt;<br/>
 <a href="http://www.macromedia.com/software/flash/">Flash</a>&reg; and
 ActionScript are trademarks or registered trademarks of <a
 href="http://www.macromedia.com">Macromedia&reg;, Inc</a> in the Unites
 States and/or other countries.<br/>
 <code>$Id: index.html,v 1.5 2003/06/30 02:39:11 rasmus Exp rasmus $</code>
</p>
</body>
</html>

@


1.5
log
@*** empty log message ***
@
text
@d25 1
a25 1
<h3>June 30, 2003: Javascript</h3>
d35 1
a35 1
public (binary only) trial version.<br>
d268 1
a268 1
 <code>$Id: index.html,v 1.4 2003/06/30 02:38:52 rasmus Exp rasmus $</code>
@


1.4
log
@*** empty log message ***
@
text
@d268 1
a268 1
 <code><b>document revision</b>$Id: index.html,v 1.3 2003/06/30 02:37:24 root Exp rasmus $</code>
@


1.3
log
@*** empty log message ***
@
text
@d268 1
a268 1
 <code>$Id$</code>
@


1.2
log
@*** empty log message ***
@
text
@d268 1
@


1.1
log
@Initial revision
@
text
@d7 1
a7 1
  The Vingmedia XML Session Server
d11 1
d14 1
a14 1
   XSS is a server application primarily intended for use together the
d19 1
a19 1
   TCP socket and XML. XSL is in development. Alpha versions are
d24 21
a44 4
<h2>The name "XSS"</h2>
<p> 
The names "XSS" and "XML Session Server" are working names. I intend
to give the server a better name shortly. Any suggestions are welcome.
a45 1
<h2>News</h2>
a65 1

d67 17
d85 3
a87 1

d97 1
a97 1
import se.vingmedia.xss.server.*;
d195 9
a204 1
    var url = "counter-sample.html";
d206 2
a207 3
    for (var x = 100; x < 620; x += 105) {
        var w = window.open(url, "w" + x, "menubar=no,toolbar=no,width=100,height=100,screenX=" + x + ",screenY=100");
	w.moveTo(x, 100);
a208 2
    //window.open(url, "counter-window", "menubar=no,directories=no,location=no,scrollbars=no,status=no,toolbar=no,width=100,height=100,screenX=100,screenY=0");

d220 3
a222 2
the counter</a>. If you want to examine the source code more closely,
the files are available below<sup>2</sup>:
d244 2
d263 1
a263 1
 href="mailto:rasmus@@micoco.com">rasmus@@micoco.com</a>&gt;<br/>
a267 1
 This page has been requested <accessed/> times and was last modified <modified/>.<br/>
@
